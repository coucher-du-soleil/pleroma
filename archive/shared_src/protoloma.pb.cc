// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoloma.proto

#include "protoloma.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnnouncePeer_protoloma_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssignClusterInfo_protoloma_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Call_protoloma_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERefVal_protoloma_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostInfo_protoloma_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ListVal_protoloma_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NumVal_protoloma_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protoloma_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StrVal_protoloma_2eproto;
namespace romabuf {
class HostInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostInfo> _instance;
} _HostInfo_default_instance_;
class NumValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NumVal> _instance;
} _NumVal_default_instance_;
class StrValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StrVal> _instance;
} _StrVal_default_instance_;
class ListValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVal> _instance;
} _ListVal_default_instance_;
class ERefValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERefVal> _instance;
} _ERefVal_default_instance_;
class PValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PValue> _instance;
  const ::romabuf::NumVal* num_val_;
  const ::romabuf::StrVal* str_val_;
  const ::romabuf::ERefVal* eref_val_;
  const ::romabuf::ListVal* list_val_;
} _PValue_default_instance_;
class PleromaMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PleromaMessage> _instance;
  const ::romabuf::Call* call_;
  const ::romabuf::AnnouncePeer* announce_peer_;
  const ::romabuf::AssignClusterInfo* assign_cluster_info_;
  const ::romabuf::HostInfo* host_info_;
} _PleromaMessage_default_instance_;
class CallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Call> _instance;
} _Call_default_instance_;
class AnnouncePeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnouncePeer> _instance;
} _AnnouncePeer_default_instance_;
class AssignClusterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssignClusterInfo> _instance;
} _AssignClusterInfo_default_instance_;
class GreetingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Greeting> _instance;
} _Greeting_default_instance_;
class GreetingAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GreetingAck> _instance;
} _GreetingAck_default_instance_;
class LoadProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadProgram> _instance;
} _LoadProgram_default_instance_;
}  // namespace romabuf
static void InitDefaultsscc_info_AnnouncePeer_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_AnnouncePeer_default_instance_;
    new (ptr) ::romabuf::AnnouncePeer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::AnnouncePeer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnnouncePeer_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnnouncePeer_protoloma_2eproto}, {}};

static void InitDefaultsscc_info_AssignClusterInfo_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_AssignClusterInfo_default_instance_;
    new (ptr) ::romabuf::AssignClusterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::AssignClusterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssignClusterInfo_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssignClusterInfo_protoloma_2eproto}, {
      &scc_info_HostInfo_protoloma_2eproto.base,}};

static void InitDefaultsscc_info_Call_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_Call_default_instance_;
    new (ptr) ::romabuf::Call();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::Call::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Call_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Call_protoloma_2eproto}, {
      &scc_info_ListVal_protoloma_2eproto.base,}};

static void InitDefaultsscc_info_ERefVal_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_ERefVal_default_instance_;
    new (ptr) ::romabuf::ERefVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::ERefVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERefVal_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERefVal_protoloma_2eproto}, {}};

static void InitDefaultsscc_info_Greeting_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_Greeting_default_instance_;
    new (ptr) ::romabuf::Greeting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::Greeting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Greeting_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Greeting_protoloma_2eproto}, {}};

static void InitDefaultsscc_info_GreetingAck_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_GreetingAck_default_instance_;
    new (ptr) ::romabuf::GreetingAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::GreetingAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GreetingAck_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GreetingAck_protoloma_2eproto}, {}};

static void InitDefaultsscc_info_HostInfo_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_HostInfo_default_instance_;
    new (ptr) ::romabuf::HostInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::HostInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostInfo_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HostInfo_protoloma_2eproto}, {
      &scc_info_ERefVal_protoloma_2eproto.base,}};

static void InitDefaultsscc_info_ListVal_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_ListVal_default_instance_;
    new (ptr) ::romabuf::ListVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::romabuf::_PValue_default_instance_;
    new (ptr) ::romabuf::PValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::ListVal::InitAsDefaultInstance();
  ::romabuf::PValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ListVal_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ListVal_protoloma_2eproto}, {
      &scc_info_NumVal_protoloma_2eproto.base,
      &scc_info_StrVal_protoloma_2eproto.base,
      &scc_info_ERefVal_protoloma_2eproto.base,}};

static void InitDefaultsscc_info_LoadProgram_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_LoadProgram_default_instance_;
    new (ptr) ::romabuf::LoadProgram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::LoadProgram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadProgram_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadProgram_protoloma_2eproto}, {}};

static void InitDefaultsscc_info_NumVal_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_NumVal_default_instance_;
    new (ptr) ::romabuf::NumVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::NumVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NumVal_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NumVal_protoloma_2eproto}, {}};

static void InitDefaultsscc_info_PleromaMessage_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_PleromaMessage_default_instance_;
    new (ptr) ::romabuf::PleromaMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::PleromaMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PleromaMessage_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PleromaMessage_protoloma_2eproto}, {
      &scc_info_Call_protoloma_2eproto.base,
      &scc_info_AnnouncePeer_protoloma_2eproto.base,
      &scc_info_AssignClusterInfo_protoloma_2eproto.base,
      &scc_info_HostInfo_protoloma_2eproto.base,}};

static void InitDefaultsscc_info_StrVal_protoloma_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::romabuf::_StrVal_default_instance_;
    new (ptr) ::romabuf::StrVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::romabuf::StrVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StrVal_protoloma_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StrVal_protoloma_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protoloma_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protoloma_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protoloma_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protoloma_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::romabuf::HostInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::HostInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::HostInfo, address_),
  PROTOBUF_FIELD_OFFSET(::romabuf::HostInfo, port_),
  PROTOBUF_FIELD_OFFSET(::romabuf::HostInfo, nodeman_addr_),
  PROTOBUF_FIELD_OFFSET(::romabuf::HostInfo, resources_),
  2,
  0,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::romabuf::NumVal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::NumVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::NumVal, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::romabuf::StrVal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::StrVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::StrVal, value_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::romabuf::ListVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::ListVal, values_),
  PROTOBUF_FIELD_OFFSET(::romabuf::ERefVal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::ERefVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::ERefVal, node_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::ERefVal, vat_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::ERefVal, entity_id_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::romabuf::PValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::romabuf::PValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::romabuf::PValueDefaultTypeInternal, num_val_),
  offsetof(::romabuf::PValueDefaultTypeInternal, str_val_),
  offsetof(::romabuf::PValueDefaultTypeInternal, eref_val_),
  offsetof(::romabuf::PValueDefaultTypeInternal, list_val_),
  PROTOBUF_FIELD_OFFSET(::romabuf::PValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::romabuf::PleromaMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::romabuf::PleromaMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::romabuf::PleromaMessageDefaultTypeInternal, call_),
  offsetof(::romabuf::PleromaMessageDefaultTypeInternal, announce_peer_),
  offsetof(::romabuf::PleromaMessageDefaultTypeInternal, assign_cluster_info_),
  offsetof(::romabuf::PleromaMessageDefaultTypeInternal, host_info_),
  PROTOBUF_FIELD_OFFSET(::romabuf::PleromaMessage, msg_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, node_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, vat_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, entity_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, function_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, src_node_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, src_vat_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, src_entity_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, src_function_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, response_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, promise_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Call, pvalues_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::romabuf::AnnouncePeer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::AnnouncePeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::AnnouncePeer, address_),
  PROTOBUF_FIELD_OFFSET(::romabuf::AnnouncePeer, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::romabuf::AssignClusterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::AssignClusterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::AssignClusterInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::AssignClusterInfo, monad_node_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::AssignClusterInfo, monad_vat_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::AssignClusterInfo, monad_entity_id_),
  PROTOBUF_FIELD_OFFSET(::romabuf::AssignClusterInfo, nodes_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::romabuf::Greeting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::Greeting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::Greeting, node_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::romabuf::GreetingAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::romabuf::GreetingAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::romabuf::GreetingAck, node_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::romabuf::LoadProgram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::romabuf::HostInfo)},
  { 15, 21, sizeof(::romabuf::NumVal)},
  { 22, 28, sizeof(::romabuf::StrVal)},
  { 29, -1, sizeof(::romabuf::ListVal)},
  { 35, 43, sizeof(::romabuf::ERefVal)},
  { 46, -1, sizeof(::romabuf::PValue)},
  { 56, -1, sizeof(::romabuf::PleromaMessage)},
  { 66, 82, sizeof(::romabuf::Call)},
  { 93, 100, sizeof(::romabuf::AnnouncePeer)},
  { 102, 112, sizeof(::romabuf::AssignClusterInfo)},
  { 117, 123, sizeof(::romabuf::Greeting)},
  { 124, 130, sizeof(::romabuf::GreetingAck)},
  { 131, -1, sizeof(::romabuf::LoadProgram)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_HostInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_NumVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_StrVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_ListVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_ERefVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_PValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_PleromaMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_Call_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_AnnouncePeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_AssignClusterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_Greeting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_GreetingAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::romabuf::_LoadProgram_default_instance_),
};

const char descriptor_table_protodef_protoloma_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017protoloma.proto\022\007romabuf\"u\n\010HostInfo\022\017"
  "\n\007node_id\030\001 \002(\005\022\017\n\007address\030\002 \002(\t\022\014\n\004port"
  "\030\003 \002(\r\022&\n\014nodeman_addr\030\004 \002(\0132\020.romabuf.E"
  "RefVal\022\021\n\tresources\030\005 \003(\t\"\027\n\006NumVal\022\r\n\005v"
  "alue\030\001 \002(\005\"\027\n\006StrVal\022\r\n\005value\030\001 \002(\t\"*\n\007L"
  "istVal\022\037\n\006values\030\001 \003(\0132\017.romabuf.PValue\""
  "=\n\007ERefVal\022\017\n\007node_id\030\001 \002(\005\022\016\n\006vat_id\030\002 "
  "\002(\005\022\021\n\tentity_id\030\003 \002(\005\"\245\001\n\006PValue\022\"\n\007num"
  "_val\030\001 \001(\0132\017.romabuf.NumValH\000\022\"\n\007str_val"
  "\030\002 \001(\0132\017.romabuf.StrValH\000\022$\n\010eref_val\030\003 "
  "\001(\0132\020.romabuf.ERefValH\000\022$\n\010list_val\030\004 \001("
  "\0132\020.romabuf.ListValH\000B\007\n\005value\"\311\001\n\016Plero"
  "maMessage\022\035\n\004call\030\001 \001(\0132\r.romabuf.CallH\000"
  "\022.\n\rannounce_peer\030\002 \001(\0132\025.romabuf.Announ"
  "cePeerH\000\0229\n\023assign_cluster_info\030\003 \001(\0132\032."
  "romabuf.AssignClusterInfoH\000\022&\n\thost_info"
  "\030\004 \001(\0132\021.romabuf.HostInfoH\000B\005\n\003msg\"\360\001\n\004C"
  "all\022\017\n\007node_id\030\001 \002(\005\022\016\n\006vat_id\030\002 \002(\005\022\021\n\t"
  "entity_id\030\003 \002(\005\022\023\n\013function_id\030\004 \002(\t\022\023\n\013"
  "src_node_id\030\005 \002(\005\022\022\n\nsrc_vat_id\030\006 \002(\005\022\025\n"
  "\rsrc_entity_id\030\007 \002(\005\022\027\n\017src_function_id\030"
  "\010 \002(\t\022\020\n\010response\030\t \002(\010\022\022\n\npromise_id\030\n "
  "\002(\005\022 \n\007pvalues\030\013 \003(\0132\017.romabuf.PValue\"-\n"
  "\014AnnouncePeer\022\017\n\007address\030\001 \002(\t\022\014\n\004port\030\002"
  " \002(\r\"\214\001\n\021AssignClusterInfo\022\017\n\007node_id\030\001 "
  "\002(\r\022\025\n\rmonad_node_id\030\002 \002(\005\022\024\n\014monad_vat_"
  "id\030\003 \002(\005\022\027\n\017monad_entity_id\030\004 \002(\005\022 \n\005nod"
  "es\030\005 \003(\0132\021.romabuf.HostInfo\"\035\n\010Greeting\022"
  "\021\n\tnode_name\030\001 \002(\t\"\036\n\013GreetingAck\022\017\n\007nod"
  "e_id\030\001 \002(\005\"\r\n\013LoadProgram"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protoloma_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protoloma_2eproto_sccs[12] = {
  &scc_info_AnnouncePeer_protoloma_2eproto.base,
  &scc_info_AssignClusterInfo_protoloma_2eproto.base,
  &scc_info_Call_protoloma_2eproto.base,
  &scc_info_ERefVal_protoloma_2eproto.base,
  &scc_info_Greeting_protoloma_2eproto.base,
  &scc_info_GreetingAck_protoloma_2eproto.base,
  &scc_info_HostInfo_protoloma_2eproto.base,
  &scc_info_ListVal_protoloma_2eproto.base,
  &scc_info_LoadProgram_protoloma_2eproto.base,
  &scc_info_NumVal_protoloma_2eproto.base,
  &scc_info_PleromaMessage_protoloma_2eproto.base,
  &scc_info_StrVal_protoloma_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protoloma_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protoloma_2eproto = {
  false, false, descriptor_table_protodef_protoloma_2eproto, "protoloma.proto", 1185,
  &descriptor_table_protoloma_2eproto_once, descriptor_table_protoloma_2eproto_sccs, descriptor_table_protoloma_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_protoloma_2eproto::offsets,
  file_level_metadata_protoloma_2eproto, 13, file_level_enum_descriptors_protoloma_2eproto, file_level_service_descriptors_protoloma_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protoloma_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protoloma_2eproto)), true);
namespace romabuf {

// ===================================================================

void HostInfo::InitAsDefaultInstance() {
  ::romabuf::_HostInfo_default_instance_._instance.get_mutable()->nodeman_addr_ = const_cast< ::romabuf::ERefVal*>(
      ::romabuf::ERefVal::internal_default_instance());
}
class HostInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<HostInfo>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::romabuf::ERefVal& nodeman_addr(const HostInfo* msg);
  static void set_has_nodeman_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::romabuf::ERefVal&
HostInfo::_Internal::nodeman_addr(const HostInfo* msg) {
  return *msg->nodeman_addr_;
}
HostInfo::HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      resources_(from.resources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  if (from._internal_has_nodeman_addr()) {
    nodeman_addr_ = new ::romabuf::ERefVal(*from.nodeman_addr_);
  } else {
    nodeman_addr_ = nullptr;
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:romabuf.HostInfo)
}

void HostInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostInfo_protoloma_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeman_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&nodeman_addr_)) + sizeof(port_));
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:romabuf.HostInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodeman_addr_;
}

void HostInfo::ArenaDtor(void* object) {
  HostInfo* _this = reinterpret_cast< HostInfo* >(object);
  (void)_this;
}
void HostInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostInfo& HostInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostInfo_protoloma_2eproto.base);
  return *internal_default_instance();
}


void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nodeman_addr_ != nullptr);
      nodeman_addr_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "romabuf.HostInfo.address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .romabuf.ERefVal nodeman_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeman_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string resources = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resources();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "romabuf.HostInfo.resources");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // required string address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "romabuf.HostInfo.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // required uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // required .romabuf.ERefVal nodeman_addr = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nodeman_addr(this), target, stream);
  }

  // repeated string resources = 5;
  for (int i = 0, n = this->_internal_resources_size(); i < n; i++) {
    const auto& s = this->_internal_resources(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "romabuf.HostInfo.resources");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.HostInfo)
  return target;
}

size_t HostInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:romabuf.HostInfo)
  size_t total_size = 0;

  if (_internal_has_address()) {
    // required string address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (_internal_has_nodeman_addr()) {
    // required .romabuf.ERefVal nodeman_addr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodeman_addr_);
  }

  if (_internal_has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  if (_internal_has_port()) {
    // required uint32 port = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  return total_size;
}
size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.HostInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());

    // required .romabuf.ERefVal nodeman_addr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodeman_addr_);

    // required int32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());

    // required uint32 port = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resources = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resources_.size());
  for (int i = 0, n = resources_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resources_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.HostInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.HostInfo)
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_.MergeFrom(from.resources_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nodeman_addr()->::romabuf::ERefVal::MergeFrom(from._internal_nodeman_addr());
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HostInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_nodeman_addr()) {
    if (!nodeman_addr_->IsInitialized()) return false;
  }
  return true;
}

void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  resources_.InternalSwap(&other->resources_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostInfo, port_)
      + sizeof(HostInfo::port_)
      - PROTOBUF_FIELD_OFFSET(HostInfo, nodeman_addr_)>(
          reinterpret_cast<char*>(&nodeman_addr_),
          reinterpret_cast<char*>(&other->nodeman_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NumVal::InitAsDefaultInstance() {
}
class NumVal::_Internal {
 public:
  using HasBits = decltype(std::declval<NumVal>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NumVal::NumVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.NumVal)
}
NumVal::NumVal(const NumVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:romabuf.NumVal)
}

void NumVal::SharedCtor() {
  value_ = 0;
}

NumVal::~NumVal() {
  // @@protoc_insertion_point(destructor:romabuf.NumVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NumVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NumVal::ArenaDtor(void* object) {
  NumVal* _this = reinterpret_cast< NumVal* >(object);
  (void)_this;
}
void NumVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NumVal& NumVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NumVal_protoloma_2eproto.base);
  return *internal_default_instance();
}


void NumVal::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.NumVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.NumVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.NumVal)
  return target;
}

size_t NumVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.NumVal)
  size_t total_size = 0;

  // required int32 value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.NumVal)
  GOOGLE_DCHECK_NE(&from, this);
  const NumVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NumVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.NumVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.NumVal)
    MergeFrom(*source);
  }
}

void NumVal::MergeFrom(const NumVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.NumVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void NumVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.NumVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumVal::CopyFrom(const NumVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.NumVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumVal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NumVal::InternalSwap(NumVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StrVal::InitAsDefaultInstance() {
}
class StrVal::_Internal {
 public:
  using HasBits = decltype(std::declval<StrVal>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StrVal::StrVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.StrVal)
}
StrVal::StrVal(const StrVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:romabuf.StrVal)
}

void StrVal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StrVal_protoloma_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StrVal::~StrVal() {
  // @@protoc_insertion_point(destructor:romabuf.StrVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StrVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StrVal::ArenaDtor(void* object) {
  StrVal* _this = reinterpret_cast< StrVal* >(object);
  (void)_this;
}
void StrVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StrVal& StrVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StrVal_protoloma_2eproto.base);
  return *internal_default_instance();
}


void StrVal::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.StrVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "romabuf.StrVal.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.StrVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "romabuf.StrVal.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.StrVal)
  return target;
}

size_t StrVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.StrVal)
  size_t total_size = 0;

  // required string value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StrVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.StrVal)
  GOOGLE_DCHECK_NE(&from, this);
  const StrVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StrVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.StrVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.StrVal)
    MergeFrom(*source);
  }
}

void StrVal::MergeFrom(const StrVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.StrVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void StrVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.StrVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrVal::CopyFrom(const StrVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.StrVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrVal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StrVal::InternalSwap(StrVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StrVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVal::InitAsDefaultInstance() {
}
class ListVal::_Internal {
 public:
};

ListVal::ListVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.ListVal)
}
ListVal::ListVal(const ListVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:romabuf.ListVal)
}

void ListVal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVal_protoloma_2eproto.base);
}

ListVal::~ListVal() {
  // @@protoc_insertion_point(destructor:romabuf.ListVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListVal::ArenaDtor(void* object) {
  ListVal* _this = reinterpret_cast< ListVal* >(object);
  (void)_this;
}
void ListVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVal& ListVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVal_protoloma_2eproto.base);
  return *internal_default_instance();
}


void ListVal::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.ListVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .romabuf.PValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.ListVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .romabuf.PValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.ListVal)
  return target;
}

size_t ListVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.ListVal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .romabuf.PValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.ListVal)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.ListVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.ListVal)
    MergeFrom(*source);
  }
}

void ListVal::MergeFrom(const ListVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.ListVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.ListVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVal::CopyFrom(const ListVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.ListVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVal::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(values_)) return false;
  return true;
}

void ListVal::InternalSwap(ListVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ERefVal::InitAsDefaultInstance() {
}
class ERefVal::_Internal {
 public:
  using HasBits = decltype(std::declval<ERefVal>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ERefVal::ERefVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.ERefVal)
}
ERefVal::ERefVal(const ERefVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(entity_id_));
  // @@protoc_insertion_point(copy_constructor:romabuf.ERefVal)
}

void ERefVal::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(entity_id_));
}

ERefVal::~ERefVal() {
  // @@protoc_insertion_point(destructor:romabuf.ERefVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERefVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ERefVal::ArenaDtor(void* object) {
  ERefVal* _this = reinterpret_cast< ERefVal* >(object);
  (void)_this;
}
void ERefVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERefVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERefVal& ERefVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERefVal_protoloma_2eproto.base);
  return *internal_default_instance();
}


void ERefVal::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.ERefVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_id_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(entity_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERefVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 vat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vat_id(&has_bits);
          vat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 entity_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entity_id(&has_bits);
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERefVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.ERefVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // required int32 vat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vat_id(), target);
  }

  // required int32 entity_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.ERefVal)
  return target;
}

size_t ERefVal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:romabuf.ERefVal)
  size_t total_size = 0;

  if (_internal_has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  if (_internal_has_vat_id()) {
    // required int32 vat_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vat_id());
  }

  if (_internal_has_entity_id()) {
    // required int32 entity_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entity_id());
  }

  return total_size;
}
size_t ERefVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.ERefVal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());

    // required int32 vat_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vat_id());

    // required int32 entity_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entity_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERefVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.ERefVal)
  GOOGLE_DCHECK_NE(&from, this);
  const ERefVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERefVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.ERefVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.ERefVal)
    MergeFrom(*source);
  }
}

void ERefVal::MergeFrom(const ERefVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.ERefVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      vat_id_ = from.vat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_id_ = from.entity_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ERefVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.ERefVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERefVal::CopyFrom(const ERefVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.ERefVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERefVal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ERefVal::InternalSwap(ERefVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ERefVal, entity_id_)
      + sizeof(ERefVal::entity_id_)
      - PROTOBUF_FIELD_OFFSET(ERefVal, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ERefVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PValue::InitAsDefaultInstance() {
  ::romabuf::_PValue_default_instance_.num_val_ = const_cast< ::romabuf::NumVal*>(
      ::romabuf::NumVal::internal_default_instance());
  ::romabuf::_PValue_default_instance_.str_val_ = const_cast< ::romabuf::StrVal*>(
      ::romabuf::StrVal::internal_default_instance());
  ::romabuf::_PValue_default_instance_.eref_val_ = const_cast< ::romabuf::ERefVal*>(
      ::romabuf::ERefVal::internal_default_instance());
  ::romabuf::_PValue_default_instance_.list_val_ = const_cast< ::romabuf::ListVal*>(
      ::romabuf::ListVal::internal_default_instance());
}
class PValue::_Internal {
 public:
  static const ::romabuf::NumVal& num_val(const PValue* msg);
  static const ::romabuf::StrVal& str_val(const PValue* msg);
  static const ::romabuf::ERefVal& eref_val(const PValue* msg);
  static const ::romabuf::ListVal& list_val(const PValue* msg);
};

const ::romabuf::NumVal&
PValue::_Internal::num_val(const PValue* msg) {
  return *msg->value_.num_val_;
}
const ::romabuf::StrVal&
PValue::_Internal::str_val(const PValue* msg) {
  return *msg->value_.str_val_;
}
const ::romabuf::ERefVal&
PValue::_Internal::eref_val(const PValue* msg) {
  return *msg->value_.eref_val_;
}
const ::romabuf::ListVal&
PValue::_Internal::list_val(const PValue* msg) {
  return *msg->value_.list_val_;
}
void PValue::set_allocated_num_val(::romabuf::NumVal* num_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (num_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(num_val);
    if (message_arena != submessage_arena) {
      num_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num_val, submessage_arena);
    }
    set_has_num_val();
    value_.num_val_ = num_val;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PValue.num_val)
}
void PValue::set_allocated_str_val(::romabuf::StrVal* str_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (str_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(str_val);
    if (message_arena != submessage_arena) {
      str_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str_val, submessage_arena);
    }
    set_has_str_val();
    value_.str_val_ = str_val;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PValue.str_val)
}
void PValue::set_allocated_eref_val(::romabuf::ERefVal* eref_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (eref_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eref_val);
    if (message_arena != submessage_arena) {
      eref_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eref_val, submessage_arena);
    }
    set_has_eref_val();
    value_.eref_val_ = eref_val;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PValue.eref_val)
}
void PValue::set_allocated_list_val(::romabuf::ListVal* list_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (list_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_val);
    if (message_arena != submessage_arena) {
      list_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_val, submessage_arena);
    }
    set_has_list_val();
    value_.list_val_ = list_val;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PValue.list_val)
}
PValue::PValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.PValue)
}
PValue::PValue(const PValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kNumVal: {
      _internal_mutable_num_val()->::romabuf::NumVal::MergeFrom(from._internal_num_val());
      break;
    }
    case kStrVal: {
      _internal_mutable_str_val()->::romabuf::StrVal::MergeFrom(from._internal_str_val());
      break;
    }
    case kErefVal: {
      _internal_mutable_eref_val()->::romabuf::ERefVal::MergeFrom(from._internal_eref_val());
      break;
    }
    case kListVal: {
      _internal_mutable_list_val()->::romabuf::ListVal::MergeFrom(from._internal_list_val());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:romabuf.PValue)
}

void PValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVal_protoloma_2eproto.base);
  clear_has_value();
}

PValue::~PValue() {
  // @@protoc_insertion_point(destructor:romabuf.PValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void PValue::ArenaDtor(void* object) {
  PValue* _this = reinterpret_cast< PValue* >(object);
  (void)_this;
}
void PValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PValue& PValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVal_protoloma_2eproto.base);
  return *internal_default_instance();
}


void PValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:romabuf.PValue)
  switch (value_case()) {
    case kNumVal: {
      if (GetArena() == nullptr) {
        delete value_.num_val_;
      }
      break;
    }
    case kStrVal: {
      if (GetArena() == nullptr) {
        delete value_.str_val_;
      }
      break;
    }
    case kErefVal: {
      if (GetArena() == nullptr) {
        delete value_.eref_val_;
      }
      break;
    }
    case kListVal: {
      if (GetArena() == nullptr) {
        delete value_.list_val_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void PValue::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.PValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .romabuf.NumVal num_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .romabuf.StrVal str_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_str_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .romabuf.ERefVal eref_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_eref_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .romabuf.ListVal list_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.PValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kNumVal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::num_val(this), target, stream);
      break;
    }
    case kStrVal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::str_val(this), target, stream);
      break;
    }
    case kErefVal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::eref_val(this), target, stream);
      break;
    }
    case kListVal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::list_val(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.PValue)
  return target;
}

size_t PValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.PValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .romabuf.NumVal num_val = 1;
    case kNumVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.num_val_);
      break;
    }
    // .romabuf.StrVal str_val = 2;
    case kStrVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.str_val_);
      break;
    }
    // .romabuf.ERefVal eref_val = 3;
    case kErefVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.eref_val_);
      break;
    }
    // .romabuf.ListVal list_val = 4;
    case kListVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_val_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.PValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.PValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.PValue)
    MergeFrom(*source);
  }
}

void PValue::MergeFrom(const PValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.PValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kNumVal: {
      _internal_mutable_num_val()->::romabuf::NumVal::MergeFrom(from._internal_num_val());
      break;
    }
    case kStrVal: {
      _internal_mutable_str_val()->::romabuf::StrVal::MergeFrom(from._internal_str_val());
      break;
    }
    case kErefVal: {
      _internal_mutable_eref_val()->::romabuf::ERefVal::MergeFrom(from._internal_eref_val());
      break;
    }
    case kListVal: {
      _internal_mutable_list_val()->::romabuf::ListVal::MergeFrom(from._internal_list_val());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void PValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.PValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PValue::CopyFrom(const PValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.PValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PValue::IsInitialized() const {
  switch (value_case()) {
    case kNumVal: {
      if (has_num_val()) {
        if (!this->num_val().IsInitialized()) return false;
      }
      break;
    }
    case kStrVal: {
      if (has_str_val()) {
        if (!this->str_val().IsInitialized()) return false;
      }
      break;
    }
    case kErefVal: {
      if (has_eref_val()) {
        if (!this->eref_val().IsInitialized()) return false;
      }
      break;
    }
    case kListVal: {
      if (has_list_val()) {
        if (!this->list_val().IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void PValue::InternalSwap(PValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PleromaMessage::InitAsDefaultInstance() {
  ::romabuf::_PleromaMessage_default_instance_.call_ = const_cast< ::romabuf::Call*>(
      ::romabuf::Call::internal_default_instance());
  ::romabuf::_PleromaMessage_default_instance_.announce_peer_ = const_cast< ::romabuf::AnnouncePeer*>(
      ::romabuf::AnnouncePeer::internal_default_instance());
  ::romabuf::_PleromaMessage_default_instance_.assign_cluster_info_ = const_cast< ::romabuf::AssignClusterInfo*>(
      ::romabuf::AssignClusterInfo::internal_default_instance());
  ::romabuf::_PleromaMessage_default_instance_.host_info_ = const_cast< ::romabuf::HostInfo*>(
      ::romabuf::HostInfo::internal_default_instance());
}
class PleromaMessage::_Internal {
 public:
  static const ::romabuf::Call& call(const PleromaMessage* msg);
  static const ::romabuf::AnnouncePeer& announce_peer(const PleromaMessage* msg);
  static const ::romabuf::AssignClusterInfo& assign_cluster_info(const PleromaMessage* msg);
  static const ::romabuf::HostInfo& host_info(const PleromaMessage* msg);
};

const ::romabuf::Call&
PleromaMessage::_Internal::call(const PleromaMessage* msg) {
  return *msg->msg_.call_;
}
const ::romabuf::AnnouncePeer&
PleromaMessage::_Internal::announce_peer(const PleromaMessage* msg) {
  return *msg->msg_.announce_peer_;
}
const ::romabuf::AssignClusterInfo&
PleromaMessage::_Internal::assign_cluster_info(const PleromaMessage* msg) {
  return *msg->msg_.assign_cluster_info_;
}
const ::romabuf::HostInfo&
PleromaMessage::_Internal::host_info(const PleromaMessage* msg) {
  return *msg->msg_.host_info_;
}
void PleromaMessage::set_allocated_call(::romabuf::Call* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(call);
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    set_has_call();
    msg_.call_ = call;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PleromaMessage.call)
}
void PleromaMessage::set_allocated_announce_peer(::romabuf::AnnouncePeer* announce_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (announce_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(announce_peer);
    if (message_arena != submessage_arena) {
      announce_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, announce_peer, submessage_arena);
    }
    set_has_announce_peer();
    msg_.announce_peer_ = announce_peer;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PleromaMessage.announce_peer)
}
void PleromaMessage::set_allocated_assign_cluster_info(::romabuf::AssignClusterInfo* assign_cluster_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (assign_cluster_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(assign_cluster_info);
    if (message_arena != submessage_arena) {
      assign_cluster_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assign_cluster_info, submessage_arena);
    }
    set_has_assign_cluster_info();
    msg_.assign_cluster_info_ = assign_cluster_info;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PleromaMessage.assign_cluster_info)
}
void PleromaMessage::set_allocated_host_info(::romabuf::HostInfo* host_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (host_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(host_info);
    if (message_arena != submessage_arena) {
      host_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_info, submessage_arena);
    }
    set_has_host_info();
    msg_.host_info_ = host_info;
  }
  // @@protoc_insertion_point(field_set_allocated:romabuf.PleromaMessage.host_info)
}
PleromaMessage::PleromaMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.PleromaMessage)
}
PleromaMessage::PleromaMessage(const PleromaMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kCall: {
      _internal_mutable_call()->::romabuf::Call::MergeFrom(from._internal_call());
      break;
    }
    case kAnnouncePeer: {
      _internal_mutable_announce_peer()->::romabuf::AnnouncePeer::MergeFrom(from._internal_announce_peer());
      break;
    }
    case kAssignClusterInfo: {
      _internal_mutable_assign_cluster_info()->::romabuf::AssignClusterInfo::MergeFrom(from._internal_assign_cluster_info());
      break;
    }
    case kHostInfo: {
      _internal_mutable_host_info()->::romabuf::HostInfo::MergeFrom(from._internal_host_info());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:romabuf.PleromaMessage)
}

void PleromaMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PleromaMessage_protoloma_2eproto.base);
  clear_has_msg();
}

PleromaMessage::~PleromaMessage() {
  // @@protoc_insertion_point(destructor:romabuf.PleromaMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PleromaMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void PleromaMessage::ArenaDtor(void* object) {
  PleromaMessage* _this = reinterpret_cast< PleromaMessage* >(object);
  (void)_this;
}
void PleromaMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PleromaMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PleromaMessage& PleromaMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PleromaMessage_protoloma_2eproto.base);
  return *internal_default_instance();
}


void PleromaMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:romabuf.PleromaMessage)
  switch (msg_case()) {
    case kCall: {
      if (GetArena() == nullptr) {
        delete msg_.call_;
      }
      break;
    }
    case kAnnouncePeer: {
      if (GetArena() == nullptr) {
        delete msg_.announce_peer_;
      }
      break;
    }
    case kAssignClusterInfo: {
      if (GetArena() == nullptr) {
        delete msg_.assign_cluster_info_;
      }
      break;
    }
    case kHostInfo: {
      if (GetArena() == nullptr) {
        delete msg_.host_info_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void PleromaMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.PleromaMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PleromaMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .romabuf.Call call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .romabuf.AnnouncePeer announce_peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_announce_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .romabuf.AssignClusterInfo assign_cluster_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_assign_cluster_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .romabuf.HostInfo host_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PleromaMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.PleromaMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (msg_case()) {
    case kCall: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::call(this), target, stream);
      break;
    }
    case kAnnouncePeer: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::announce_peer(this), target, stream);
      break;
    }
    case kAssignClusterInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::assign_cluster_info(this), target, stream);
      break;
    }
    case kHostInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::host_info(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.PleromaMessage)
  return target;
}

size_t PleromaMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.PleromaMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .romabuf.Call call = 1;
    case kCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.call_);
      break;
    }
    // .romabuf.AnnouncePeer announce_peer = 2;
    case kAnnouncePeer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.announce_peer_);
      break;
    }
    // .romabuf.AssignClusterInfo assign_cluster_info = 3;
    case kAssignClusterInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.assign_cluster_info_);
      break;
    }
    // .romabuf.HostInfo host_info = 4;
    case kHostInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.host_info_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PleromaMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.PleromaMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PleromaMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PleromaMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.PleromaMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.PleromaMessage)
    MergeFrom(*source);
  }
}

void PleromaMessage::MergeFrom(const PleromaMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.PleromaMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kCall: {
      _internal_mutable_call()->::romabuf::Call::MergeFrom(from._internal_call());
      break;
    }
    case kAnnouncePeer: {
      _internal_mutable_announce_peer()->::romabuf::AnnouncePeer::MergeFrom(from._internal_announce_peer());
      break;
    }
    case kAssignClusterInfo: {
      _internal_mutable_assign_cluster_info()->::romabuf::AssignClusterInfo::MergeFrom(from._internal_assign_cluster_info());
      break;
    }
    case kHostInfo: {
      _internal_mutable_host_info()->::romabuf::HostInfo::MergeFrom(from._internal_host_info());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void PleromaMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.PleromaMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PleromaMessage::CopyFrom(const PleromaMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.PleromaMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PleromaMessage::IsInitialized() const {
  switch (msg_case()) {
    case kCall: {
      if (has_call()) {
        if (!this->call().IsInitialized()) return false;
      }
      break;
    }
    case kAnnouncePeer: {
      if (has_announce_peer()) {
        if (!this->announce_peer().IsInitialized()) return false;
      }
      break;
    }
    case kAssignClusterInfo: {
      if (has_assign_cluster_info()) {
        if (!this->assign_cluster_info().IsInitialized()) return false;
      }
      break;
    }
    case kHostInfo: {
      if (has_host_info()) {
        if (!this->host_info().IsInitialized()) return false;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return true;
}

void PleromaMessage::InternalSwap(PleromaMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PleromaMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Call::InitAsDefaultInstance() {
}
class Call::_Internal {
 public:
  using HasBits = decltype(std::declval<Call>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_function_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_src_vat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_src_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_src_function_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_promise_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

Call::Call(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.Call)
}
Call::Call(const Call& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pvalues_(from.pvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function_id()) {
    function_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_function_id(),
      GetArena());
  }
  src_function_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_function_id()) {
    src_function_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src_function_id(),
      GetArena());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&promise_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(promise_id_));
  // @@protoc_insertion_point(copy_constructor:romabuf.Call)
}

void Call::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Call_protoloma_2eproto.base);
  function_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_function_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promise_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(promise_id_));
}

Call::~Call() {
  // @@protoc_insertion_point(destructor:romabuf.Call)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Call::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_function_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Call::ArenaDtor(void* object) {
  Call* _this = reinterpret_cast< Call* >(object);
  (void)_this;
}
void Call::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Call::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Call& Call::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Call_protoloma_2eproto.base);
  return *internal_default_instance();
}


void Call::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      src_function_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&src_entity_id_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(src_entity_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&promise_id_) -
        reinterpret_cast<char*>(&response_)) + sizeof(promise_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Call::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 vat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vat_id(&has_bits);
          vat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 entity_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entity_id(&has_bits);
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string function_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_function_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "romabuf.Call.function_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 src_node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_src_node_id(&has_bits);
          src_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 src_vat_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_src_vat_id(&has_bits);
          src_vat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 src_entity_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_src_entity_id(&has_bits);
          src_entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string src_function_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_src_function_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "romabuf.Call.src_function_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 promise_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_promise_id(&has_bits);
          promise_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .romabuf.PValue pvalues = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Call::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // required int32 vat_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vat_id(), target);
  }

  // required int32 entity_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_id(), target);
  }

  // required string function_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_id().data(), static_cast<int>(this->_internal_function_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "romabuf.Call.function_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_function_id(), target);
  }

  // required int32 src_node_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_src_node_id(), target);
  }

  // required int32 src_vat_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_src_vat_id(), target);
  }

  // required int32 src_entity_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_src_entity_id(), target);
  }

  // required string src_function_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_function_id().data(), static_cast<int>(this->_internal_src_function_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "romabuf.Call.src_function_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_src_function_id(), target);
  }

  // required bool response = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_response(), target);
  }

  // required int32 promise_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_promise_id(), target);
  }

  // repeated .romabuf.PValue pvalues = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_pvalues(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.Call)
  return target;
}

size_t Call::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:romabuf.Call)
  size_t total_size = 0;

  if (_internal_has_function_id()) {
    // required string function_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_id());
  }

  if (_internal_has_src_function_id()) {
    // required string src_function_id = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_function_id());
  }

  if (_internal_has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  if (_internal_has_vat_id()) {
    // required int32 vat_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vat_id());
  }

  if (_internal_has_entity_id()) {
    // required int32 entity_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entity_id());
  }

  if (_internal_has_src_node_id()) {
    // required int32 src_node_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_node_id());
  }

  if (_internal_has_src_vat_id()) {
    // required int32 src_vat_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_vat_id());
  }

  if (_internal_has_src_entity_id()) {
    // required int32 src_entity_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_entity_id());
  }

  if (_internal_has_response()) {
    // required bool response = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_promise_id()) {
    // required int32 promise_id = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_promise_id());
  }

  return total_size;
}
size_t Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.Call)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string function_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_id());

    // required string src_function_id = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_function_id());

    // required int32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());

    // required int32 vat_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vat_id());

    // required int32 entity_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entity_id());

    // required int32 src_node_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_node_id());

    // required int32 src_vat_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_vat_id());

    // required int32 src_entity_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_entity_id());

    // required bool response = 9;
    total_size += 1 + 1;

    // required int32 promise_id = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_promise_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .romabuf.PValue pvalues = 11;
  total_size += 1UL * this->_internal_pvalues_size();
  for (const auto& msg : this->pvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Call::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.Call)
  GOOGLE_DCHECK_NE(&from, this);
  const Call* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Call>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.Call)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.Call)
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.Call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pvalues_.MergeFrom(from.pvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function_id(from._internal_function_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_src_function_id(from._internal_src_function_id());
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      vat_id_ = from.vat_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      entity_id_ = from.entity_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      src_node_id_ = from.src_node_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      src_vat_id_ = from.src_vat_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      src_entity_id_ = from.src_entity_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000200u) {
      promise_id_ = from.promise_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Call::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pvalues_)) return false;
  return true;
}

void Call::InternalSwap(Call* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pvalues_.InternalSwap(&other->pvalues_);
  function_id_.Swap(&other->function_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_function_id_.Swap(&other->src_function_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Call, promise_id_)
      + sizeof(Call::promise_id_)
      - PROTOBUF_FIELD_OFFSET(Call, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Call::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnnouncePeer::InitAsDefaultInstance() {
}
class AnnouncePeer::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnouncePeer>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AnnouncePeer::AnnouncePeer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.AnnouncePeer)
}
AnnouncePeer::AnnouncePeer(const AnnouncePeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:romabuf.AnnouncePeer)
}

void AnnouncePeer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnnouncePeer_protoloma_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

AnnouncePeer::~AnnouncePeer() {
  // @@protoc_insertion_point(destructor:romabuf.AnnouncePeer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnnouncePeer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnnouncePeer::ArenaDtor(void* object) {
  AnnouncePeer* _this = reinterpret_cast< AnnouncePeer* >(object);
  (void)_this;
}
void AnnouncePeer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnouncePeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnouncePeer& AnnouncePeer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnnouncePeer_protoloma_2eproto.base);
  return *internal_default_instance();
}


void AnnouncePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.AnnouncePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmpty();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnouncePeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "romabuf.AnnouncePeer.address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnouncePeer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.AnnouncePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "romabuf.AnnouncePeer.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.AnnouncePeer)
  return target;
}

size_t AnnouncePeer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:romabuf.AnnouncePeer)
  size_t total_size = 0;

  if (_internal_has_address()) {
    // required string address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (_internal_has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  return total_size;
}
size_t AnnouncePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.AnnouncePeer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());

    // required uint32 port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnouncePeer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.AnnouncePeer)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnouncePeer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnouncePeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.AnnouncePeer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.AnnouncePeer)
    MergeFrom(*source);
  }
}

void AnnouncePeer::MergeFrom(const AnnouncePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.AnnouncePeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnouncePeer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.AnnouncePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnouncePeer::CopyFrom(const AnnouncePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.AnnouncePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnouncePeer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AnnouncePeer::InternalSwap(AnnouncePeer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnouncePeer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssignClusterInfo::InitAsDefaultInstance() {
}
class AssignClusterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AssignClusterInfo>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_monad_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_monad_vat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_monad_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

AssignClusterInfo::AssignClusterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.AssignClusterInfo)
}
AssignClusterInfo::AssignClusterInfo(const AssignClusterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&monad_entity_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(monad_entity_id_));
  // @@protoc_insertion_point(copy_constructor:romabuf.AssignClusterInfo)
}

void AssignClusterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssignClusterInfo_protoloma_2eproto.base);
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monad_entity_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(monad_entity_id_));
}

AssignClusterInfo::~AssignClusterInfo() {
  // @@protoc_insertion_point(destructor:romabuf.AssignClusterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssignClusterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssignClusterInfo::ArenaDtor(void* object) {
  AssignClusterInfo* _this = reinterpret_cast< AssignClusterInfo* >(object);
  (void)_this;
}
void AssignClusterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignClusterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssignClusterInfo& AssignClusterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssignClusterInfo_protoloma_2eproto.base);
  return *internal_default_instance();
}


void AssignClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.AssignClusterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&monad_entity_id_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(monad_entity_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignClusterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 monad_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_monad_node_id(&has_bits);
          monad_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 monad_vat_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_monad_vat_id(&has_bits);
          monad_vat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 monad_entity_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_monad_entity_id(&has_bits);
          monad_entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .romabuf.HostInfo nodes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignClusterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.AssignClusterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_id(), target);
  }

  // required int32 monad_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monad_node_id(), target);
  }

  // required int32 monad_vat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_monad_vat_id(), target);
  }

  // required int32 monad_entity_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_monad_entity_id(), target);
  }

  // repeated .romabuf.HostInfo nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.AssignClusterInfo)
  return target;
}

size_t AssignClusterInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:romabuf.AssignClusterInfo)
  size_t total_size = 0;

  if (_internal_has_node_id()) {
    // required uint32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_id());
  }

  if (_internal_has_monad_node_id()) {
    // required int32 monad_node_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monad_node_id());
  }

  if (_internal_has_monad_vat_id()) {
    // required int32 monad_vat_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monad_vat_id());
  }

  if (_internal_has_monad_entity_id()) {
    // required int32 monad_entity_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monad_entity_id());
  }

  return total_size;
}
size_t AssignClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.AssignClusterInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 node_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_id());

    // required int32 monad_node_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monad_node_id());

    // required int32 monad_vat_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monad_vat_id());

    // required int32 monad_entity_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monad_entity_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .romabuf.HostInfo nodes = 5;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignClusterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.AssignClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AssignClusterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssignClusterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.AssignClusterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.AssignClusterInfo)
    MergeFrom(*source);
  }
}

void AssignClusterInfo::MergeFrom(const AssignClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.AssignClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      monad_node_id_ = from.monad_node_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      monad_vat_id_ = from.monad_vat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      monad_entity_id_ = from.monad_entity_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AssignClusterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.AssignClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignClusterInfo::CopyFrom(const AssignClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.AssignClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignClusterInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(nodes_)) return false;
  return true;
}

void AssignClusterInfo::InternalSwap(AssignClusterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_.InternalSwap(&other->nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignClusterInfo, monad_entity_id_)
      + sizeof(AssignClusterInfo::monad_entity_id_)
      - PROTOBUF_FIELD_OFFSET(AssignClusterInfo, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignClusterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Greeting::InitAsDefaultInstance() {
}
class Greeting::_Internal {
 public:
  using HasBits = decltype(std::declval<Greeting>()._has_bits_);
  static void set_has_node_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Greeting::Greeting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.Greeting)
}
Greeting::Greeting(const Greeting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_name()) {
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:romabuf.Greeting)
}

void Greeting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Greeting_protoloma_2eproto.base);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Greeting::~Greeting() {
  // @@protoc_insertion_point(destructor:romabuf.Greeting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Greeting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Greeting::ArenaDtor(void* object) {
  Greeting* _this = reinterpret_cast< Greeting* >(object);
  (void)_this;
}
void Greeting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Greeting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Greeting& Greeting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Greeting_protoloma_2eproto.base);
  return *internal_default_instance();
}


void Greeting::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.Greeting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    node_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Greeting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "romabuf.Greeting.node_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Greeting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.Greeting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string node_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "romabuf.Greeting.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.Greeting)
  return target;
}

size_t Greeting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.Greeting)
  size_t total_size = 0;

  // required string node_name = 1;
  if (_internal_has_node_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Greeting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.Greeting)
  GOOGLE_DCHECK_NE(&from, this);
  const Greeting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Greeting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.Greeting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.Greeting)
    MergeFrom(*source);
  }
}

void Greeting::MergeFrom(const Greeting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.Greeting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node_name()) {
    _internal_set_node_name(from._internal_node_name());
  }
}

void Greeting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.Greeting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Greeting::CopyFrom(const Greeting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.Greeting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Greeting::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Greeting::InternalSwap(Greeting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Greeting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GreetingAck::InitAsDefaultInstance() {
}
class GreetingAck::_Internal {
 public:
  using HasBits = decltype(std::declval<GreetingAck>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GreetingAck::GreetingAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.GreetingAck)
}
GreetingAck::GreetingAck(const GreetingAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:romabuf.GreetingAck)
}

void GreetingAck::SharedCtor() {
  node_id_ = 0;
}

GreetingAck::~GreetingAck() {
  // @@protoc_insertion_point(destructor:romabuf.GreetingAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GreetingAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GreetingAck::ArenaDtor(void* object) {
  GreetingAck* _this = reinterpret_cast< GreetingAck* >(object);
  (void)_this;
}
void GreetingAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GreetingAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GreetingAck& GreetingAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GreetingAck_protoloma_2eproto.base);
  return *internal_default_instance();
}


void GreetingAck::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.GreetingAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GreetingAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GreetingAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.GreetingAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.GreetingAck)
  return target;
}

size_t GreetingAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.GreetingAck)
  size_t total_size = 0;

  // required int32 node_id = 1;
  if (_internal_has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GreetingAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.GreetingAck)
  GOOGLE_DCHECK_NE(&from, this);
  const GreetingAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GreetingAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.GreetingAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.GreetingAck)
    MergeFrom(*source);
  }
}

void GreetingAck::MergeFrom(const GreetingAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.GreetingAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node_id()) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void GreetingAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.GreetingAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GreetingAck::CopyFrom(const GreetingAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.GreetingAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreetingAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GreetingAck::InternalSwap(GreetingAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GreetingAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadProgram::InitAsDefaultInstance() {
}
class LoadProgram::_Internal {
 public:
};

LoadProgram::LoadProgram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:romabuf.LoadProgram)
}
LoadProgram::LoadProgram(const LoadProgram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:romabuf.LoadProgram)
}

void LoadProgram::SharedCtor() {
}

LoadProgram::~LoadProgram() {
  // @@protoc_insertion_point(destructor:romabuf.LoadProgram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadProgram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadProgram::ArenaDtor(void* object) {
  LoadProgram* _this = reinterpret_cast< LoadProgram* >(object);
  (void)_this;
}
void LoadProgram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadProgram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadProgram& LoadProgram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadProgram_protoloma_2eproto.base);
  return *internal_default_instance();
}


void LoadProgram::Clear() {
// @@protoc_insertion_point(message_clear_start:romabuf.LoadProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadProgram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadProgram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:romabuf.LoadProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:romabuf.LoadProgram)
  return target;
}

size_t LoadProgram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:romabuf.LoadProgram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadProgram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:romabuf.LoadProgram)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadProgram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadProgram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:romabuf.LoadProgram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:romabuf.LoadProgram)
    MergeFrom(*source);
  }
}

void LoadProgram::MergeFrom(const LoadProgram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:romabuf.LoadProgram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LoadProgram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:romabuf.LoadProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadProgram::CopyFrom(const LoadProgram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:romabuf.LoadProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadProgram::IsInitialized() const {
  return true;
}

void LoadProgram::InternalSwap(LoadProgram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadProgram::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace romabuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::romabuf::HostInfo* Arena::CreateMaybeMessage< ::romabuf::HostInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::HostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::NumVal* Arena::CreateMaybeMessage< ::romabuf::NumVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::NumVal >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::StrVal* Arena::CreateMaybeMessage< ::romabuf::StrVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::StrVal >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::ListVal* Arena::CreateMaybeMessage< ::romabuf::ListVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::ListVal >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::ERefVal* Arena::CreateMaybeMessage< ::romabuf::ERefVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::ERefVal >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::PValue* Arena::CreateMaybeMessage< ::romabuf::PValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::PValue >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::PleromaMessage* Arena::CreateMaybeMessage< ::romabuf::PleromaMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::PleromaMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::Call* Arena::CreateMaybeMessage< ::romabuf::Call >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::Call >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::AnnouncePeer* Arena::CreateMaybeMessage< ::romabuf::AnnouncePeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::AnnouncePeer >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::AssignClusterInfo* Arena::CreateMaybeMessage< ::romabuf::AssignClusterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::AssignClusterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::Greeting* Arena::CreateMaybeMessage< ::romabuf::Greeting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::Greeting >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::GreetingAck* Arena::CreateMaybeMessage< ::romabuf::GreetingAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::GreetingAck >(arena);
}
template<> PROTOBUF_NOINLINE ::romabuf::LoadProgram* Arena::CreateMaybeMessage< ::romabuf::LoadProgram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::romabuf::LoadProgram >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
